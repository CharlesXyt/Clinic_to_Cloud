{"version":3,"sources":["assest/exampleData/exampleData.js","component/Input/StyledInputs.js","component/Input/Input.js","container/onlineSubmit/StyledForm.js","container/onlineSubmit/onlineSubmit.js","App.js","serviceWorker.js","index.js"],"names":["bmiReferenceProps","id","observationName","dataElements","displayName","type","display","isRequired","value","valid","firstTimeLoading","message","options","name","isDefault","sortOrder","unitOfMeasure","bounds","upperLimit","lowerLimit","headCircumferenceReferenceProps","ErrorMessage","styled","p","useStyles","makeStyles","select","width","CustomInput","props","inputElement","classes","TextField","label","onChange","changed","InputLabelProps","required","defaultOption","filter","el","FormControl","InputLabel","Select","className","map","MenuItem","key","FormHelperText","result","style","marginBottom","Form","div","FormElement","form","OnlineSubmit","buttonOnClick","formValues","state","Object","assign","newBmiIndex","parseFloat","weight","height","setState","bmiIndex","toFixed","bmiPropsFirstTimeLoading","bmi","headPropsFirstTimeLoading","console","log","checkValidity","element","changedValue","test","inputChangeHandler","event","typeId","formType","target","newProps","newDataElements","newPropState","disableType","isDisable","length","bmiProps","headProps","bmiPropsDisable","headPropsDisable","this","head","formBmi","Input","formHead","fontSize","Button","variant","onClick","disabled","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d76264f9.chunk.js","sourcesContent":["const bmiReferenceProps = {\r\n    id: 'bmi',\r\n    observationName: 'BMI - Body mass index',\r\n    dataElements: [\r\n      {\r\n        id: 'name',\r\n        displayName: 'Name',\r\n        type: 'textInput',\r\n        display: true,\r\n        isRequired: true,\r\n        value:\"\",\r\n        valid:false,\r\n        firstTimeLoading:true,\r\n        message:\"*need to input a first and last name (separated by a space).\"\r\n      },\r\n      {\r\n        id: 'gender',\r\n        displayName: 'Gender',\r\n        type: 'select',\r\n        options: [\r\n          {\r\n            id: 1,\r\n            name: 'Male',\r\n            isDefault: true,\r\n            sortOrder: 1,\r\n          },\r\n          {\r\n            id: 2,\r\n            name: 'Female',\r\n            isDefault: false,\r\n            sortOrder: 2,\r\n          },\r\n        ],\r\n        display: true,\r\n        isRequired: false,\r\n        value:\"Male\",\r\n        firstTimeLoading:true,\r\n        valid:true\r\n      },\r\n      {\r\n        id: 'weight',\r\n        displayName: 'Weight',\r\n        unitOfMeasure: 'kg',\r\n        type: 'numberInput',\r\n        bounds: {\r\n          upperLimit: 1000,\r\n          lowerLimit:0\r\n        },\r\n        display: true,\r\n        isRequired: true,\r\n        value:\"\",\r\n        valid:false,\r\n        firstTimeLoading:true,\r\n        message:\"*should not exceed 1000 or lower than 0\"\r\n      },\r\n      {\r\n        id: 'height',\r\n        displayName: 'Height',\r\n        unitOfMeasure: 'cm',\r\n        type: 'numberInput',\r\n        bounds: {\r\n          upperLimit: 300,\r\n          lowerLimit:0\r\n        },\r\n        display: true,\r\n        isRequired: true,\r\n        value:\"\",\r\n        valid:false,\r\n        firstTimeLoading:true,\r\n        message:\"*should not exceed 300 or lower than 0\"\r\n      },\r\n      {\r\n        id: 'bmi',\r\n        displayName: 'BMI',\r\n        unitOfMeasure: 'kg/m2',\r\n        type: 'numberInput',\r\n        bounds: {\r\n          upperLimit: 100,\r\n          lowerLimit:0\r\n        },\r\n        display: false,\r\n        isRequired: false,\r\n        value:\"\",\r\n        firstTimeLoading:true,\r\n        valid:true\r\n      },\r\n    ],\r\n  };\r\n  \r\n  const headCircumferenceReferenceProps = {\r\n    id: 'head-circumference',\r\n    observationName: 'Head Circumference',\r\n    dataElements: [\r\n      {\r\n        id: 'name',\r\n        displayName: 'Name',\r\n        type: 'textInput',\r\n        display: true,\r\n        isRequired: true,\r\n        value:\"\",\r\n        valid:false,\r\n        firstTimeLoading:true,\r\n        message:\"*need to input a first and last name (separated by a space).\"\r\n      },\r\n      {\r\n        id: 'gender',\r\n        displayName: 'Gender',\r\n        type: 'select',\r\n        options: [\r\n          {\r\n            id: 1,\r\n            name: 'Male',\r\n            isDefault: true,\r\n            sortOrder: 1,\r\n          },\r\n          {\r\n            id: 2,\r\n            name: 'Female',\r\n            isDefault: false,\r\n            sortOrder: 2,\r\n          },\r\n        ],\r\n        display: true,\r\n        isRequired: false,\r\n        value:\"Male\",\r\n        firstTimeLoading:true,\r\n        valid:true\r\n      },\r\n      {\r\n        id: 'head-circumference',\r\n        displayName: 'Head Circumference',\r\n        unitOfMeasure: 'cm',\r\n        type: 'numberInput',\r\n        bounds: {\r\n          upperLimit: 1000,\r\n          lowerLimit:0\r\n        },\r\n        display: true,\r\n        isRequired: true,\r\n        value:\"\",\r\n        valid:false,\r\n        firstTimeLoading:true,\r\n        message:\"*should not exceed 1000 or lower than 0\"\r\n      },\r\n    ],\r\n  };\r\n\r\n  export {\r\n      bmiReferenceProps,\r\n      headCircumferenceReferenceProps\r\n    }\r\n\r\n  ","import styled from 'styled-components'\r\n\r\nconst ErrorMessage = styled.p`\r\n    font-size:10px;\r\n    color:red\r\n`\r\n\r\nexport {\r\n    ErrorMessage\r\n}","import React from 'react'\r\nimport {ErrorMessage} from './StyledInputs'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    TextField,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    FormHelperText\r\n} from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles({\r\n    select: {\r\n      width:\"100%\"\r\n    },\r\n  });\r\n\r\n\r\n\r\nfunction CustomInput(props){\r\n    let inputElement = null\r\n    const classes = useStyles(props);\r\n    //according to the type, return the inputElement\r\n    switch(props.type){\r\n        case 'textInput':\r\n            inputElement = <TextField\r\n                                label={props.displayName}\r\n                                onChange={props.changed}\r\n                                InputLabelProps={{\r\n                                    type:\"text\", \r\n                                    required:props.isRequired,\r\n                                    value:props.value\r\n                                }}\r\n                            />\r\n            // <StyledInput placeholder= ></StyledInput>\r\n            break\r\n        case 'select':\r\n            const defaultOption = props.options.filter((el) => {return el.isDefault})[0].name\r\n            inputElement = (\r\n                <FormControl required={props.isRequired}>\r\n                    <InputLabel>{props.displayName}</InputLabel>\r\n                    <Select\r\n                    className={classes.select}\r\n                    value={props.value ? props.value : defaultOption}\r\n                    onChange={props.changed}\r\n                    >\r\n                    {props.options.map(el => {\r\n                        return (\r\n                            <MenuItem \r\n                                key={el.name + \"_\"+ el.id} \r\n                                value={el.name}\r\n                            >{el.name}</MenuItem>\r\n                    )})}\r\n                    </Select>\r\n                    <FormHelperText>Required</FormHelperText>\r\n                </FormControl>\r\n            )\r\n            break\r\n        case 'numberInput':\r\n            inputElement = <TextField\r\n                                label={props.displayName+\"/\"+props.unitOfMeasure}\r\n                                onChange={props.changed}\r\n                                InputLabelProps={{\r\n                                    type:\"number\", \r\n                                    required:props.isRequired,\r\n                                    value:props.value\r\n                                }}\r\n                            />\r\n            break\r\n        default:\r\n            inputElement = <TextField/>\r\n    }\r\n\r\n    //decide if it needs to be displayed\r\n    const result = props.display ? (<div style={{marginBottom:\"5px\"}}>\r\n                                    {inputElement}\r\n                                    <ErrorMessage>{!props.valid && !props.firstTimeLoading ? props.message : null}</ErrorMessage>\r\n                                </div>) : null\r\n    return (\r\n        <div>\r\n            {result}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nCustomInput.propTypes = {\r\n    type:PropTypes.string.isRequired,\r\n    valid:PropTypes.bool.isRequired,\r\n    firstTime:PropTypes.bool,\r\n    isRequired:PropTypes.bool,\r\n    changed:PropTypes.func.isRequired,\r\n    value:PropTypes.oneOfType([PropTypes.string,PropTypes.number]),\r\n    message:PropTypes.string,\r\n    option:PropTypes.arrayOf(PropTypes.object),\r\n    display:PropTypes.bool\r\n}\r\n\r\n\r\n\r\nexport default CustomInput;","import styled from 'styled-components'\r\n\r\n\r\nconst Form = styled.div`\r\n    display:flex;\r\n    justify-content:space-around\r\n    margin-top:30px;\r\n`\r\n\r\nconst FormElement = styled.form`\r\n    margin:20px auto;\r\n    box-shadow: 0 2px 3px #ccc;\r\n    border: 1px solid #eee;\r\n    padding: 2% 3%;\r\n    box-sizing: border-box;\r\n    display:flex;\r\n    width:30%;\r\n    flex-flow:column nowrap;\r\n    justify-content:flex-start;\r\n`\r\n\r\n\r\n\r\n\r\nexport {Form,FormElement}","import React from 'react'\r\nimport InputElement from '../../component/Input/Input'\r\nimport {Button} from \"@material-ui/core\"\r\nimport {Form,FormElement} from './StyledForm'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass OnlineSubmit extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            bmiProps:\"\",\r\n            headProps:\"\",\r\n            bmiPropsDisable:\"\",\r\n            headPropsDisable:\"\",\r\n            bmiIndex:null,\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.setState({\r\n            bmiProps:this.props.bmi,\r\n            headProps:this.props.head,\r\n            bmiPropsDisable:true,\r\n            headPropsDisable:true,\r\n            bmiIndex:null,\r\n        })\r\n    }\r\n\r\n    //after clicking the button, log the results and set the bmi value\r\n    buttonOnClick = (type) => {\r\n        const formValues = this.state[type].dataElements.map((el) => {return {[el.id]:el.value}})\r\n        const result = Object.assign(...formValues)\r\n        if(type === \"bmiProps\"){\r\n            const newBmiIndex = parseFloat(result.weight) / (parseFloat(result.height) * parseFloat(result.height) ) * 10000\r\n            this.setState({\r\n                bmiIndex: newBmiIndex.toFixed(1),\r\n                bmiPropsFirstTimeLoading:true,\r\n            })\r\n            result.bmi = newBmiIndex.toFixed(1)\r\n        }\r\n        if(type === \"headProps\"){\r\n            this.setState({\r\n                headPropsFirstTimeLoading:true\r\n            })\r\n        }\r\n        console.log(result)\r\n        \r\n    }\r\n\r\n    //check the element if it satisfies the requirements\r\n    checkValidity = (element,changedValue) => {\r\n        let valid= true\r\n        if(element.bounds){\r\n            if(element.bounds.upperLimit){\r\n                valid = changedValue < element.bounds.upperLimit && valid\r\n            }\r\n            if(element.bounds.lowerLimit===0 || element.bounds.lowerLimit ){\r\n                valid = changedValue > element.bounds.lowerLimit && valid\r\n            }\r\n        }\r\n        if(element.id === \"name\"){\r\n            const re = /[A-Za-z]+\\s+[A-Za-z]+/\r\n            return re.test(changedValue)\r\n        }\r\n        return valid\r\n    }\r\n\r\n    //handle the inputchange\r\n    inputChangeHandler = (event,typeId,formType) => {\r\n        const changedValue = event.target.value\r\n        const newProps = {...this.state[formType]}\r\n        const newDataElements = this.state[formType].dataElements.map((el) => {\r\n            if(el.id === typeId){\r\n                return {\r\n                    ...el,\r\n                    value:changedValue,\r\n                    valid:this.checkValidity(el,changedValue),\r\n                    firstTimeLoading:false,\r\n                }\r\n            }else{\r\n                return {\r\n                    ...el\r\n                }\r\n            }\r\n        })\r\n        const newPropState = {\r\n            ...newProps,\r\n            dataElements:newDataElements\r\n        }\r\n        const disableType = formType + \"Disable\"\r\n        const isDisable = newDataElements.filter((el) => ! el.valid).length > 0 ? true : false\r\n        this.setState({\r\n            ...this.state,\r\n            [formType]:newPropState,\r\n            [disableType]:isDisable,\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const formBmi = this.state.bmiProps.dataElements.map((el) => {\r\n            return (\r\n                <InputElement changed={(event) => this.inputChangeHandler(event,el.id,\"bmiProps\")} key={el.id} {...el}/>\r\n            )\r\n        })\r\n        const formHead = this.state.headProps.dataElements.map((el) => {\r\n            return (\r\n                <InputElement changed={(event) => this.inputChangeHandler(event,el.id,\"headProps\")} key={el.id} {...el}/>\r\n            )\r\n        })\r\n        return(\r\n            <Form> \r\n                <FormElement>\r\n                    <p><strong>{this.state.bmiProps.observationName} Form</strong></p>\r\n                    {formBmi}\r\n                    {this.state.bmiIndex ? <p>BMI: <span style={{fontSize:\"16px\",}}><strong>{this.state.bmiIndex + \" kg/m2\" }</strong></span></p> : null}\r\n                    <Button  variant=\"contained\" onClick={() => this.buttonOnClick(\"bmiProps\")} disabled={this.state.bmiPropsDisable}>Submit</Button>\r\n                </FormElement>\r\n                <FormElement>\r\n                    <p><strong>{this.state.headProps.observationName} Form</strong></p>\r\n                    {formHead}\r\n                    <Button  variant=\"contained\" onClick={() => this.buttonOnClick(\"headProps\")} disabled={this.state.headPropsDisable}>Submit</Button>\r\n                </FormElement>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nOnlineSubmit.propTypes = {\r\n    bmi:PropTypes.object,\r\n    head:PropTypes.object\r\n}\r\n\r\nexport default OnlineSubmit;","import React from 'react';\r\nimport  {bmiReferenceProps,headCircumferenceReferenceProps} from './assest/exampleData/exampleData'\r\nimport Form from './container/onlineSubmit/onlineSubmit'\r\n\r\nfunction App() {\r\n  return (\r\n    <Form bmi={bmiReferenceProps} head={headCircumferenceReferenceProps}/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}