{"version":3,"sources":["assest/exampleData/exampleData.js","component/Input/StyledInputs.js","component/Input/Input.js","component/Button/StyledButton.js","component/Button/Button.js","container/onlineSubmit/StyledForm.js","container/onlineSubmit/onlineSubmit.js","App.js","serviceWorker.js","index.js"],"names":["bmiReferenceProps","id","observationName","dataElements","displayName","type","display","isRequired","value","valid","message","options","name","isDefault","sortOrder","unitOfMeasure","bounds","upperLimit","lowerLimit","headCircumferenceReferenceProps","StyledInput","styled","input","StyledLabel","label","StyledSelect","select","ErrorMessage","p","props","inputElement","placeholder","required","onChange","changed","defaultOption","filter","el","map","key","result","style","marginBottom","fontSize","firstTime","StyledButton","button","Button","onClick","disabled","Form","div","FormElement","OnlineSubmit","buttonOnClick","formValues","state","Object","assign","newBmiIndex","parseFloat","weight","height","setState","bmiIndex","toFixed","bmiPropsFirstTimeLoading","bmi","headPropsFirstTimeLoading","console","log","checkValidity","element","changedValue","test","inputChangeHandler","event","typeId","formType","target","newProps","newDataElements","newPropState","disableType","firstLoading","isDisable","length","bmiProps","headProps","head","bmiPropsDisable","headPropsDisable","this","headPropsfirstTimeLoading","formBmi","Input","formHead","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19a5dc96.chunk.js","sourcesContent":["const bmiReferenceProps = {\n    id: 'bmi',\n    observationName: 'BMI - Body mass index',\n    dataElements: [\n      {\n        id: 'name',\n        displayName: 'Name',\n        type: 'textInput',\n        display: true,\n        isRequired: true,\n        value:\"\",\n        valid:false,\n        message:\"*need to input a first and last name (separated by a space).\"\n      },\n      {\n        id: 'gender',\n        displayName: 'Gender',\n        type: 'select',\n        options: [\n          {\n            id: 1,\n            name: 'Male',\n            isDefault: true,\n            sortOrder: 1,\n          },\n          {\n            id: 2,\n            name: 'Female',\n            isDefault: false,\n            sortOrder: 2,\n          },\n        ],\n        display: true,\n        isRequired: false,\n        value:\"Male\",\n        valid:true\n      },\n      {\n        id: 'weight',\n        displayName: 'Weight',\n        unitOfMeasure: 'kg',\n        type: 'numberInput',\n        bounds: {\n          upperLimit: 1000,\n          lowerLimit:0\n        },\n        display: true,\n        isRequired: true,\n        value:\"\",\n        valid:false,\n        message:\"*should not exceed 1000 or lower than 0\"\n      },\n      {\n        id: 'height',\n        displayName: 'Height',\n        unitOfMeasure: 'cm',\n        type: 'numberInput',\n        bounds: {\n          upperLimit: 300,\n          lowerLimit:0\n        },\n        display: true,\n        isRequired: true,\n        value:\"\",\n        valid:false,\n        message:\"*should not exceed 300 or lower than 0\"\n      },\n      {\n        id: 'bmi',\n        displayName: 'BMI',\n        unitOfMeasure: 'kg/m2',\n        type: 'numberInput',\n        bounds: {\n          upperLimit: 100,\n          lowerLimit:0\n        },\n        display: false,\n        isRequired: false,\n        value:\"\",\n        valid:true\n      },\n    ],\n  };\n  \n  const headCircumferenceReferenceProps = {\n    id: 'head-circumference',\n    observationName: 'Head Circumference',\n    dataElements: [\n      {\n        id: 'name',\n        displayName: 'Name',\n        type: 'textInput',\n        display: true,\n        isRequired: true,\n        value:\"\",\n        valid:false,\n        message:\"*need to input a first and last name (separated by a space).\"\n      },\n      {\n        id: 'gender',\n        displayName: 'Gender',\n        type: 'select',\n        options: [\n          {\n            id: 1,\n            name: 'Male',\n            isDefault: true,\n            sortOrder: 1,\n          },\n          {\n            id: 2,\n            name: 'Female',\n            isDefault: false,\n            sortOrder: 2,\n          },\n        ],\n        display: true,\n        isRequired: false,\n        value:\"Male\",\n        valid:true\n      },\n      {\n        id: 'head-circumference',\n        displayName: 'Head Circumference',\n        unitOfMeasure: 'cm',\n        type: 'numberInput',\n        bounds: {\n          upperLimit: 1000,\n          lowerLimit:0\n        },\n        display: true,\n        isRequired: true,\n        value:\"\",\n        valid:false,\n        message:\"*should not exceed 1000 or lower than 0\"\n      },\n    ],\n  };\n\n  export {\n      bmiReferenceProps,\n      headCircumferenceReferenceProps\n    }\n\n  ","import styled from 'styled-components'\n\nconst StyledInput = styled.input`\n    display:inline-block;\n    outline-style: none ;\n    border: 1px solid #ccc; \n    border-radius: 3px;\n    padding: 10px 10px;\n    font-size: 24px;\n    width:70%\n    :focus{\n        border-color: #66afe9;\n        outline: 0;\n        -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);\n        box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6)\n    }\n    ::placeholder{\n        font-size:16px;\n    }\n`\n\nconst StyledLabel = styled.label`\n    padding-left:3px;\n    font-size:16px;\n    color: black; \n    line-height: 30px; \n    display: block;\n`\n\nconst StyledSelect = styled.select`\n    width:76%; \n    height:40px; \n    line-height:40px; \n    filter:alpha(opacity=0);\n    cursor:pointer; \n    font-size: 16px;\n`\n\nconst ErrorMessage = styled.p`\n    font-size:10px;\n    color:red\n`\n\nexport {\n    StyledInput,\n    StyledSelect,\n    StyledLabel,\n    ErrorMessage\n}","import React from 'react'\nimport {StyledInput,StyledSelect,StyledLabel,ErrorMessage} from './StyledInputs'\nimport PropTypes from 'prop-types'\n\n\nconst input = (props) => {\n    let inputElement = null\n\n    //according to the type, return the inputElement\n    switch(props.type){\n        case 'textInput':\n            inputElement = <StyledInput placeholder={props.displayName} type=\"text\" required={props.isRequired} onChange={props.changed} value={props.value}></StyledInput>\n            break\n        case 'select':\n            const defaultOption = props.options.filter((el) => {return el.isDefault})[0].name\n            inputElement = (\n                <StyledSelect value={props.value ? props.value : defaultOption} onChange={props.changed} required={props.isRequired}>\n                    {props.options.map(el => {\n                        return (\n                            <option \n                                key={el.name + \"_\"+ el.id} \n                                value={el.name}\n                            >{el.name}</option>\n                    )})}\n                </StyledSelect>\n            )\n            break\n        case 'numberInput':\n            inputElement = <StyledInput placeholder={props.displayName} type=\"number\" value={props.value} onChange={props.changed} required={props.isRequired}></StyledInput>\n            break\n        default:\n            inputElement = <StyledInput placeholder={props.displayName} value={props.value} onChange={props.changed} required={props.isRequired}></StyledInput>\n    }\n\n    //decide if it needs to be displayed\n    const result = props.display ? (<div style={{marginBottom:\"5px\"}}>\n                        <StyledLabel>{props.displayName}</StyledLabel>\n                        {inputElement}\n                        <span style={{fontSize:\"16px\"}}>{props.unitOfMeasure}</span>\n                        <ErrorMessage>{!props.valid && !props.firstTime ? props.message : null}</ErrorMessage>\n                    </div>) : null\n    return (\n        <div>\n            {result}\n        </div>\n    )\n\n}\n\ninput.propTypes = {\n    type:PropTypes.string.isRequired,\n    valid:PropTypes.bool.isRequired,\n    firstTime:PropTypes.bool,\n    isRequired:PropTypes.bool,\n    changed:PropTypes.func.isRequired,\n    value:PropTypes.oneOfType([PropTypes.string,PropTypes.number]),\n    message:PropTypes.string,\n    option:PropTypes.arrayOf(PropTypes.object),\n    display:PropTypes.bool\n}\n\n\n\nexport default input;","import styled from 'styled-components'\n\nconst StyledButton = styled.button`\n    cursor:pointer;\n    border: 1px solid #4daff9;\n    border-radius:3px;\n    width: 50%; \n    height:40px;\n    padding: 5px 5px; \n    font-size:16px;\n    margin:20px auto;\n    margin-bottom:0;\n    background: #fff; \n    color: #4daff9; \n\n    :focus{\n        color: #fff;\n        background: #0a90f5;\n    }\n    :disabled{\n        color:#ccc;\n        cursor:not-allowed;\n    }\n\n\n    \n\n`\n\nexport default StyledButton;","import React from 'react'\nimport StyledButton from './StyledButton'\nimport PropTypes from 'prop-types'\n\n\nconst Button = (props) => {\n    return <StyledButton onClick={props.onClick} disabled={props.disabled}>Submit</StyledButton>\n} \n\nButton.propTypes = {\n    onClick:PropTypes.func,\n    disabled:PropTypes.bool\n}\n\n\nexport default Button;","import styled from 'styled-components'\n\n\nconst Form = styled.div`\n    display:flex;\n    justify-content:space-around\n    margin-top:30px;\n`\n\nconst FormElement = styled.div`\n    margin:20px auto;\n    box-shadow: 0 2px 3px #ccc;\n    border: 1px solid #eee;\n    padding: 2% 3%;\n    box-sizing: border-box;\n    display:flex;\n    width:30%;\n    flex-flow:column nowrap;\n    justify-content:center;\n`\n\n\n\n\nexport {Form,FormElement}","import React from 'react'\nimport InputElement from '../../component/Input/Input'\nimport Button from '../../component/Button/Button'\nimport {Form,FormElement} from './StyledForm'\nimport PropTypes from 'prop-types'\n\nclass OnlineSubmit extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state={\n            bmiProps:props.bmi,\n            headProps:props.head,\n            bmiPropsDisable:true,\n            headPropsDisable:true,\n            bmiIndex:null,\n            bmiPropsFirstTimeLoading:true,\n            headPropsFirstTimeLoading:true\n        }\n    }\n\n    componentDidMount(){\n        this.setState({\n            bmiPropsFirstTimeLoading:true,\n            headPropsfirstTimeLoading:true\n        })\n    }\n\n    //after clicking the button, log the results and set the bmi value\n    buttonOnClick = (type) => {\n        const formValues = this.state[type].dataElements.map((el) => {return {[el.id]:el.value}})\n        const result = Object.assign(...formValues)\n        if(type === \"bmiProps\"){\n            const newBmiIndex = parseFloat(result.weight) / (parseFloat(result.height) * parseFloat(result.height) ) * 10000\n            this.setState({\n                bmiIndex: newBmiIndex.toFixed(1),\n                bmiPropsFirstTimeLoading:true,\n            })\n            result.bmi = newBmiIndex.toFixed(1)\n        }\n        if(type === \"headProps\"){\n            this.setState({\n                headPropsFirstTimeLoading:true\n            })\n        }\n        console.log(result)\n        \n    }\n\n    //check the element if it satisfies the requirements\n    checkValidity = (element,changedValue) => {\n        let valid= true\n        if(element.bounds){\n            if(element.bounds.upperLimit){\n                valid = changedValue < element.bounds.upperLimit && valid\n            }\n            if(element.bounds.lowerLimit===0 || element.bounds.lowerLimit ){\n                valid = changedValue > element.bounds.lowerLimit && valid\n            }\n        }\n        if(element.id === \"name\"){\n            const re = /[A-Za-z]+\\s+[A-Za-z]+/\n            return re.test(changedValue)\n        }\n        return valid\n    }\n\n    //handle the inputchange\n    inputChangeHandler = (event,typeId,formType) => {\n        const changedValue = event.target.value\n        const newProps = {...this.state[formType]}\n        const newDataElements = this.state[formType].dataElements.map((el) => {\n            if(el.id === typeId){\n                return {\n                    ...el,\n                    value:changedValue,\n                    valid:this.checkValidity(el,changedValue)\n                }\n            }else{\n                return {\n                    ...el\n                }\n            }\n        })\n        const newPropState = {\n            ...newProps,\n            dataElements:newDataElements\n        }\n        const disableType = formType + \"Disable\"\n        const firstLoading = formType + \"FirstTimeLoading\"\n        const isDisable = newDataElements.filter((el) => ! el.valid).length > 0 ? true : false\n        this.setState({\n            ...this.state,\n            [formType]:newPropState,\n            [disableType]:isDisable,\n            [firstLoading]:false\n        })\n    }\n\n    render(){\n        const formBmi = this.state.bmiProps.dataElements.map((el) => {\n            return (\n                <InputElement firstTime={this.state.bmiPropsFirstTimeLoading} changed={(event) => this.inputChangeHandler(event,el.id,\"bmiProps\")} key={el.id} {...el}/>\n            )\n        })\n        const formHead = this.state.headProps.dataElements.map((el) => {\n            return (\n                <InputElement firstTime={this.state.headPropsFirstTimeLoading} changed={(event) => this.inputChangeHandler(event,el.id,\"headProps\")} key={el.id} {...el}/>\n            )\n        })\n        return(\n            <Form> \n                <FormElement>\n                    <p><strong>{this.state.bmiProps.observationName} Form</strong></p>\n                    {formBmi}\n                    {this.state.bmiIndex && this.state.bmiPropsFirstTimeLoading ? <p>BMI: <span style={{fontSize:\"16px\",}}><strong>{this.state.bmiIndex + \" kg/m2\" }</strong></span></p> : null}\n                    <Button disabled={this.state.bmiPropsDisable} onClick={() => this.buttonOnClick(\"bmiProps\")}/>\n                </FormElement>\n                <FormElement>\n                    <p><strong>{this.state.headProps.observationName} Form</strong></p>\n                    {formHead}\n                    <Button disabled={this.state.headPropsDisable} onClick={() => this.buttonOnClick(\"headProps\")}/>\n                </FormElement>\n            </Form>\n        )\n    }\n}\n\nOnlineSubmit.propTypes = {\n    bmi:PropTypes.object,\n    head:PropTypes.object\n}\n\nexport default OnlineSubmit;","import React from 'react';\nimport  {bmiReferenceProps,headCircumferenceReferenceProps} from './assest/exampleData/exampleData'\nimport Form from './container/onlineSubmit/onlineSubmit'\n\nfunction App() {\n  return (\n    <Form bmi={bmiReferenceProps} head={headCircumferenceReferenceProps}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}